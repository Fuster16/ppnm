


A (6 points) Recursive adaptive intergrator



A.1
Implement a recursive open-quadrature adaptive integrator that estimates the integral of 
a given function f(x) on an interval [a,b] with the required absolute δ, or relative, ε, 
accuracy goals. The integrator has to use a combination of a higher order quadrature and 
an imbedded lower order quadrature (to estimate the local error).

Such a routine has been implemented as "integrate" (and documented) in the "adaptive.cs"
file. 



A.2
Test your implementation on some interresting integrals. for example sqrt(x), 1/sqrt(x), 
4sqrt(1-x^2) and ln(x)/sqrt(x) from a = 0 to b = 1. The should yield, respectively, 
(2/3,2,pi,-4). 

The implementation is run for the given functions and yields:

sqrt(x) = 0.666953909054655

1/sqrt(x) = 1.99996150007805

4sqrt(1-x^2) = 3.14183457802727

ln(x)/sqrt(x) = -3.99991705899915

They seem to agree with the given analytic values (2/3,2,pi,-4) and i conclude that the
routine works.

A.3
Using your integrator, implement the error function via its integral representation. Make 
a plot, compare with exact results. Can you obtain better accuracy than our approximation 
from the plot exercise?

An "erf" method for the "adaptive" class in "adaptive.cs" have been made using the 
"integrate" method from the same class. The error function from lecture week 7 have also
been copied to the "adaptive" class as the method "erf2".

Now. Taken from "wikipedia.org/wiki/Error_function" is a set of calculated erf values, which
i will compare both of the above methods to.

The plots can be found in the "Erf.svg" file. Also plotted is the residuals to the wikipedia 
table in "ErfRes.svg".



B (3 points) Open quadrature with Clenshaw-Curtis variable transformation



B.1
Inplement an (open quandrature) adaptive integrator with the Clenshaw–Curtis variable 
transformation.

The Clenshaw–Curtis variable transformation integrator has been implemented as "CCintegrate" 
and can be found as a method to "adaptive" in the "adaptive.cs" file.



B.2
Calculate some integrals with integrable divergencies at the end-points of the intervals; 
record the number of integrand evaluations; compare with your ordinary integrator without 
variable transformation. For example 1/Sqrt(x) and ln(x)/Sqrt(x) from 0 to 1.

For this, the "CCintegrate" and the "integrate" methods have been changed to also take a 
"vector c = null", which is updated by c[0]+= 1 if(c != null) in the beginning of the 
evaluation. (the reason for the vector is due to it's set-property)

The above examples have analytic values 2 and -4 respectively. The two methods are applied 
and we find that

		integrate(1/Sqrt(x),0,1) = 1.99996150007805 with number of itterations 4285

	 	CCintegrate(1/Sqrt(x),0,1) = 1.99999201046432 with number of itterations 7

And

		integrate(ln(x)/Sqrt(x),0,1) = -3.99991705899915 with number of itterations 4301

	 	CCintegrate(ln(x)/Sqrt(x),0,1) = -3.99987385646141 with number of itterations 47


B.3
Compare the number of integrand evaluations with the python/numpy's integration routines.

W.h.a.t. Do i have to install a python compiler and use the numpy.trapz function? 

			Maybe later; My C# workflow is pretty good rn



